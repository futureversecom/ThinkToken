/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type EventProofStruct = {
  eventId: PromiseOrValue<BigNumberish>;
  validatorSetId: PromiseOrValue<BigNumberish>;
  v: PromiseOrValue<BigNumberish>[];
  r: PromiseOrValue<BytesLike>[];
  s: PromiseOrValue<BytesLike>[];
  validators: PromiseOrValue<string>[];
};

export type EventProofStructOutput = [
  BigNumber,
  number,
  number[],
  string[],
  string[],
  string[]
] & {
  eventId: BigNumber;
  validatorSetId: number;
  v: number[];
  r: string[];
  s: string[];
  validators: string[];
};

export interface BridgeInterface extends utils.Interface {
  functions: {
    "accumulatedMessageFees()": FunctionFragment;
    "active()": FunctionFragment;
    "activeValidatorSetId()": FunctionFragment;
    "bridgeFee()": FunctionFragment;
    "endow()": FunctionFragment;
    "forceActiveValidatorSet(address[],uint32)": FunctionFragment;
    "forceHistoricValidatorSet(address[],uint32)": FunctionFragment;
    "maxMessageLength()": FunctionFragment;
    "maxRewardPayout()": FunctionFragment;
    "messageFee()": FunctionFragment;
    "onMessageReceived(address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "palletAddress()": FunctionFragment;
    "proofTTL()": FunctionFragment;
    "receiveMessage(address,address,bytes,(uint256,uint32,uint8[],bytes32[],bytes32[],address[]))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendMessage(address,bytes)": FunctionFragment;
    "sendMessageFee()": FunctionFragment;
    "sentEventId()": FunctionFragment;
    "setActive(bool)": FunctionFragment;
    "setBridgeFee(uint256)": FunctionFragment;
    "setMaxMessageLength(uint256)": FunctionFragment;
    "setMaxRewardPayout(uint256)": FunctionFragment;
    "setMessageFee(uint256)": FunctionFragment;
    "setPalletAddress(address)": FunctionFragment;
    "setProofTTL(uint256)": FunctionFragment;
    "setSendMessageFee(uint256)": FunctionFragment;
    "setSentEventId(uint256)": FunctionFragment;
    "setThreshold(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "thresholdPercent()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validatorSetDigests(uint256)": FunctionFragment;
    "verifiedEventIds(uint256)": FunctionFragment;
    "withdrawAll(address)": FunctionFragment;
    "withdrawMsgFees(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accumulatedMessageFees"
      | "active"
      | "activeValidatorSetId"
      | "bridgeFee"
      | "endow"
      | "forceActiveValidatorSet"
      | "forceHistoricValidatorSet"
      | "maxMessageLength"
      | "maxRewardPayout"
      | "messageFee"
      | "onMessageReceived"
      | "owner"
      | "palletAddress"
      | "proofTTL"
      | "receiveMessage"
      | "renounceOwnership"
      | "sendMessage"
      | "sendMessageFee"
      | "sentEventId"
      | "setActive"
      | "setBridgeFee"
      | "setMaxMessageLength"
      | "setMaxRewardPayout"
      | "setMessageFee"
      | "setPalletAddress"
      | "setProofTTL"
      | "setSendMessageFee"
      | "setSentEventId"
      | "setThreshold"
      | "supportsInterface"
      | "thresholdPercent"
      | "transferOwnership"
      | "validatorSetDigests"
      | "verifiedEventIds"
      | "withdrawAll"
      | "withdrawMsgFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accumulatedMessageFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeValidatorSetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridgeFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "endow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceActiveValidatorSet",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceHistoricValidatorSet",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMessageLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRewardPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onMessageReceived",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "palletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proofTTL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      EventProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sentEventId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMessageLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardPayout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPalletAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProofTTL",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendMessageFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSentEventId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "thresholdPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSetDigests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedEventIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMsgFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulatedMessageFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeValidatorSetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceActiveValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceHistoricValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMessageLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onMessageReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "palletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proofTTL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentEventId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMessageLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProofTTL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSentEventId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSetDigests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedEventIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMsgFees",
    data: BytesLike
  ): Result;

  events: {
    "BridgeActiveUpdated(bool)": EventFragment;
    "BridgeFeeUpdated(uint256)": EventFragment;
    "Endowed(uint256)": EventFragment;
    "EtherWithdrawn(address,uint256)": EventFragment;
    "ForceSetActiveValidators(bytes32,uint32)": EventFragment;
    "ForceSetHistoricValidators(bytes32,uint32)": EventFragment;
    "MaxMessageLengthUpdated(uint256)": EventFragment;
    "MaxRewardPayoutUpdated(uint256)": EventFragment;
    "MessageReceived(uint256,address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PalletAddressUpdated(address)": EventFragment;
    "ProofTTLUpdated(uint256)": EventFragment;
    "SendMessage(uint256,address,address,bytes,uint256)": EventFragment;
    "SendMessageFeeUpdated(uint256)": EventFragment;
    "SentEventIdUpdated(uint256)": EventFragment;
    "SetValidators(bytes32,uint256,uint32)": EventFragment;
    "ThresholdUpdated(uint256)": EventFragment;
    "WithdrawnMessageFees(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeActiveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Endowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceSetActiveValidators"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceSetHistoricValidators"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxMessageLengthUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxRewardPayoutUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PalletAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProofTTLUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendMessageFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentEventIdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetValidators"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnMessageFees"): EventFragment;
}

export interface BridgeActiveUpdatedEventObject {
  active: boolean;
}
export type BridgeActiveUpdatedEvent = TypedEvent<
  [boolean],
  BridgeActiveUpdatedEventObject
>;

export type BridgeActiveUpdatedEventFilter =
  TypedEventFilter<BridgeActiveUpdatedEvent>;

export interface BridgeFeeUpdatedEventObject {
  bridgeFee: BigNumber;
}
export type BridgeFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  BridgeFeeUpdatedEventObject
>;

export type BridgeFeeUpdatedEventFilter =
  TypedEventFilter<BridgeFeeUpdatedEvent>;

export interface EndowedEventObject {
  amount: BigNumber;
}
export type EndowedEvent = TypedEvent<[BigNumber], EndowedEventObject>;

export type EndowedEventFilter = TypedEventFilter<EndowedEvent>;

export interface EtherWithdrawnEventObject {
  _to: string;
  _amount: BigNumber;
}
export type EtherWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  EtherWithdrawnEventObject
>;

export type EtherWithdrawnEventFilter = TypedEventFilter<EtherWithdrawnEvent>;

export interface ForceSetActiveValidatorsEventObject {
  validatorSetDigest: string;
  validatorSetId: number;
}
export type ForceSetActiveValidatorsEvent = TypedEvent<
  [string, number],
  ForceSetActiveValidatorsEventObject
>;

export type ForceSetActiveValidatorsEventFilter =
  TypedEventFilter<ForceSetActiveValidatorsEvent>;

export interface ForceSetHistoricValidatorsEventObject {
  validatorSetDigest: string;
  validatorSetId: number;
}
export type ForceSetHistoricValidatorsEvent = TypedEvent<
  [string, number],
  ForceSetHistoricValidatorsEventObject
>;

export type ForceSetHistoricValidatorsEventFilter =
  TypedEventFilter<ForceSetHistoricValidatorsEvent>;

export interface MaxMessageLengthUpdatedEventObject {
  maxMessageLength: BigNumber;
}
export type MaxMessageLengthUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxMessageLengthUpdatedEventObject
>;

export type MaxMessageLengthUpdatedEventFilter =
  TypedEventFilter<MaxMessageLengthUpdatedEvent>;

export interface MaxRewardPayoutUpdatedEventObject {
  maxRewardPayout: BigNumber;
}
export type MaxRewardPayoutUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxRewardPayoutUpdatedEventObject
>;

export type MaxRewardPayoutUpdatedEventFilter =
  TypedEventFilter<MaxRewardPayoutUpdatedEvent>;

export interface MessageReceivedEventObject {
  eventId: BigNumber;
  source: string;
  destinate: string;
  message: string;
}
export type MessageReceivedEvent = TypedEvent<
  [BigNumber, string, string, string],
  MessageReceivedEventObject
>;

export type MessageReceivedEventFilter = TypedEventFilter<MessageReceivedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PalletAddressUpdatedEventObject {
  palletAddress: string;
}
export type PalletAddressUpdatedEvent = TypedEvent<
  [string],
  PalletAddressUpdatedEventObject
>;

export type PalletAddressUpdatedEventFilter =
  TypedEventFilter<PalletAddressUpdatedEvent>;

export interface ProofTTLUpdatedEventObject {
  proofTTL: BigNumber;
}
export type ProofTTLUpdatedEvent = TypedEvent<
  [BigNumber],
  ProofTTLUpdatedEventObject
>;

export type ProofTTLUpdatedEventFilter = TypedEventFilter<ProofTTLUpdatedEvent>;

export interface SendMessageEventObject {
  messageId: BigNumber;
  source: string;
  destination: string;
  message: string;
  fee: BigNumber;
}
export type SendMessageEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  SendMessageEventObject
>;

export type SendMessageEventFilter = TypedEventFilter<SendMessageEvent>;

export interface SendMessageFeeUpdatedEventObject {
  sendMessageFee: BigNumber;
}
export type SendMessageFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  SendMessageFeeUpdatedEventObject
>;

export type SendMessageFeeUpdatedEventFilter =
  TypedEventFilter<SendMessageFeeUpdatedEvent>;

export interface SentEventIdUpdatedEventObject {
  _newId: BigNumber;
}
export type SentEventIdUpdatedEvent = TypedEvent<
  [BigNumber],
  SentEventIdUpdatedEventObject
>;

export type SentEventIdUpdatedEventFilter =
  TypedEventFilter<SentEventIdUpdatedEvent>;

export interface SetValidatorsEventObject {
  validatorSetDigest: string;
  reward: BigNumber;
  validatorSetId: number;
}
export type SetValidatorsEvent = TypedEvent<
  [string, BigNumber, number],
  SetValidatorsEventObject
>;

export type SetValidatorsEventFilter = TypedEventFilter<SetValidatorsEvent>;

export interface ThresholdUpdatedEventObject {
  thresholdPercent: BigNumber;
}
export type ThresholdUpdatedEvent = TypedEvent<
  [BigNumber],
  ThresholdUpdatedEventObject
>;

export type ThresholdUpdatedEventFilter =
  TypedEventFilter<ThresholdUpdatedEvent>;

export interface WithdrawnMessageFeesEventObject {
  recipient: string;
  amount: BigNumber;
}
export type WithdrawnMessageFeesEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnMessageFeesEventObject
>;

export type WithdrawnMessageFeesEventFilter =
  TypedEventFilter<WithdrawnMessageFeesEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accumulatedMessageFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    activeValidatorSetId(overrides?: CallOverrides): Promise<[number]>;

    bridgeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    endow(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceActiveValidatorSet(
      newValidators: PromiseOrValue<string>[],
      newValidatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceHistoricValidatorSet(
      _validators: PromiseOrValue<string>[],
      validatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxMessageLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRewardPayout(overrides?: CallOverrides): Promise<[BigNumber]>;

    messageFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    onMessageReceived(
      source: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    palletAddress(overrides?: CallOverrides): Promise<[string]>;

    proofTTL(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      appMessage: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessageFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sentEventId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeFee(
      _bridgeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxMessageLength(
      _maxMessageLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxRewardPayout(
      _maxRewardPayout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProofTTL(
      _proofTTL: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSendMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSentEventId(
      _newId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _thresholdPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    thresholdPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorSetDigests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifiedEventIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawAll(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawMsgFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accumulatedMessageFees(overrides?: CallOverrides): Promise<BigNumber>;

  active(overrides?: CallOverrides): Promise<boolean>;

  activeValidatorSetId(overrides?: CallOverrides): Promise<number>;

  bridgeFee(overrides?: CallOverrides): Promise<BigNumber>;

  endow(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceActiveValidatorSet(
    newValidators: PromiseOrValue<string>[],
    newValidatorSetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceHistoricValidatorSet(
    _validators: PromiseOrValue<string>[],
    validatorSetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxMessageLength(overrides?: CallOverrides): Promise<BigNumber>;

  maxRewardPayout(overrides?: CallOverrides): Promise<BigNumber>;

  messageFee(overrides?: CallOverrides): Promise<BigNumber>;

  onMessageReceived(
    source: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  palletAddress(overrides?: CallOverrides): Promise<string>;

  proofTTL(overrides?: CallOverrides): Promise<BigNumber>;

  receiveMessage(
    source: PromiseOrValue<string>,
    destination: PromiseOrValue<string>,
    appMessage: PromiseOrValue<BytesLike>,
    proof: EventProofStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    destination: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessageFee(overrides?: CallOverrides): Promise<BigNumber>;

  sentEventId(overrides?: CallOverrides): Promise<BigNumber>;

  setActive(
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeFee(
    _bridgeFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxMessageLength(
    _maxMessageLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxRewardPayout(
    _maxRewardPayout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMessageFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPalletAddress(
    _palletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProofTTL(
    _proofTTL: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSendMessageFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSentEventId(
    _newId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _thresholdPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  thresholdPercent(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorSetDigests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifiedEventIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawAll(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawMsgFees(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accumulatedMessageFees(overrides?: CallOverrides): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<boolean>;

    activeValidatorSetId(overrides?: CallOverrides): Promise<number>;

    bridgeFee(overrides?: CallOverrides): Promise<BigNumber>;

    endow(overrides?: CallOverrides): Promise<void>;

    forceActiveValidatorSet(
      newValidators: PromiseOrValue<string>[],
      newValidatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceHistoricValidatorSet(
      _validators: PromiseOrValue<string>[],
      validatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxMessageLength(overrides?: CallOverrides): Promise<BigNumber>;

    maxRewardPayout(overrides?: CallOverrides): Promise<BigNumber>;

    messageFee(overrides?: CallOverrides): Promise<BigNumber>;

    onMessageReceived(
      source: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    palletAddress(overrides?: CallOverrides): Promise<string>;

    proofTTL(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      appMessage: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageFee(overrides?: CallOverrides): Promise<BigNumber>;

    sentEventId(overrides?: CallOverrides): Promise<BigNumber>;

    setActive(
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeFee(
      _bridgeFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMessageLength(
      _maxMessageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRewardPayout(
      _maxRewardPayout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProofTTL(
      _proofTTL: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSentEventId(
      _newId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      _thresholdPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    thresholdPercent(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorSetDigests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifiedEventIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawAll(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMsgFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeActiveUpdated(bool)"(
      active?: PromiseOrValue<boolean> | null
    ): BridgeActiveUpdatedEventFilter;
    BridgeActiveUpdated(
      active?: PromiseOrValue<boolean> | null
    ): BridgeActiveUpdatedEventFilter;

    "BridgeFeeUpdated(uint256)"(
      bridgeFee?: PromiseOrValue<BigNumberish> | null
    ): BridgeFeeUpdatedEventFilter;
    BridgeFeeUpdated(
      bridgeFee?: PromiseOrValue<BigNumberish> | null
    ): BridgeFeeUpdatedEventFilter;

    "Endowed(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): EndowedEventFilter;
    Endowed(amount?: PromiseOrValue<BigNumberish> | null): EndowedEventFilter;

    "EtherWithdrawn(address,uint256)"(
      _to?: null,
      _amount?: null
    ): EtherWithdrawnEventFilter;
    EtherWithdrawn(_to?: null, _amount?: null): EtherWithdrawnEventFilter;

    "ForceSetActiveValidators(bytes32,uint32)"(
      validatorSetDigest?: PromiseOrValue<BytesLike> | null,
      validatorSetId?: PromiseOrValue<BigNumberish> | null
    ): ForceSetActiveValidatorsEventFilter;
    ForceSetActiveValidators(
      validatorSetDigest?: PromiseOrValue<BytesLike> | null,
      validatorSetId?: PromiseOrValue<BigNumberish> | null
    ): ForceSetActiveValidatorsEventFilter;

    "ForceSetHistoricValidators(bytes32,uint32)"(
      validatorSetDigest?: PromiseOrValue<BytesLike> | null,
      validatorSetId?: PromiseOrValue<BigNumberish> | null
    ): ForceSetHistoricValidatorsEventFilter;
    ForceSetHistoricValidators(
      validatorSetDigest?: PromiseOrValue<BytesLike> | null,
      validatorSetId?: PromiseOrValue<BigNumberish> | null
    ): ForceSetHistoricValidatorsEventFilter;

    "MaxMessageLengthUpdated(uint256)"(
      maxMessageLength?: PromiseOrValue<BigNumberish> | null
    ): MaxMessageLengthUpdatedEventFilter;
    MaxMessageLengthUpdated(
      maxMessageLength?: PromiseOrValue<BigNumberish> | null
    ): MaxMessageLengthUpdatedEventFilter;

    "MaxRewardPayoutUpdated(uint256)"(
      maxRewardPayout?: PromiseOrValue<BigNumberish> | null
    ): MaxRewardPayoutUpdatedEventFilter;
    MaxRewardPayoutUpdated(
      maxRewardPayout?: PromiseOrValue<BigNumberish> | null
    ): MaxRewardPayoutUpdatedEventFilter;

    "MessageReceived(uint256,address,address,bytes)"(
      eventId?: PromiseOrValue<BigNumberish> | null,
      source?: PromiseOrValue<string> | null,
      destinate?: PromiseOrValue<string> | null,
      message?: null
    ): MessageReceivedEventFilter;
    MessageReceived(
      eventId?: PromiseOrValue<BigNumberish> | null,
      source?: PromiseOrValue<string> | null,
      destinate?: PromiseOrValue<string> | null,
      message?: null
    ): MessageReceivedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PalletAddressUpdated(address)"(
      palletAddress?: PromiseOrValue<string> | null
    ): PalletAddressUpdatedEventFilter;
    PalletAddressUpdated(
      palletAddress?: PromiseOrValue<string> | null
    ): PalletAddressUpdatedEventFilter;

    "ProofTTLUpdated(uint256)"(
      proofTTL?: PromiseOrValue<BigNumberish> | null
    ): ProofTTLUpdatedEventFilter;
    ProofTTLUpdated(
      proofTTL?: PromiseOrValue<BigNumberish> | null
    ): ProofTTLUpdatedEventFilter;

    "SendMessage(uint256,address,address,bytes,uint256)"(
      messageId?: null,
      source?: null,
      destination?: null,
      message?: null,
      fee?: null
    ): SendMessageEventFilter;
    SendMessage(
      messageId?: null,
      source?: null,
      destination?: null,
      message?: null,
      fee?: null
    ): SendMessageEventFilter;

    "SendMessageFeeUpdated(uint256)"(
      sendMessageFee?: PromiseOrValue<BigNumberish> | null
    ): SendMessageFeeUpdatedEventFilter;
    SendMessageFeeUpdated(
      sendMessageFee?: PromiseOrValue<BigNumberish> | null
    ): SendMessageFeeUpdatedEventFilter;

    "SentEventIdUpdated(uint256)"(
      _newId?: PromiseOrValue<BigNumberish> | null
    ): SentEventIdUpdatedEventFilter;
    SentEventIdUpdated(
      _newId?: PromiseOrValue<BigNumberish> | null
    ): SentEventIdUpdatedEventFilter;

    "SetValidators(bytes32,uint256,uint32)"(
      validatorSetDigest?: PromiseOrValue<BytesLike> | null,
      reward?: PromiseOrValue<BigNumberish> | null,
      validatorSetId?: PromiseOrValue<BigNumberish> | null
    ): SetValidatorsEventFilter;
    SetValidators(
      validatorSetDigest?: PromiseOrValue<BytesLike> | null,
      reward?: PromiseOrValue<BigNumberish> | null,
      validatorSetId?: PromiseOrValue<BigNumberish> | null
    ): SetValidatorsEventFilter;

    "ThresholdUpdated(uint256)"(
      thresholdPercent?: PromiseOrValue<BigNumberish> | null
    ): ThresholdUpdatedEventFilter;
    ThresholdUpdated(
      thresholdPercent?: PromiseOrValue<BigNumberish> | null
    ): ThresholdUpdatedEventFilter;

    "WithdrawnMessageFees(address,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnMessageFeesEventFilter;
    WithdrawnMessageFees(
      recipient?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnMessageFeesEventFilter;
  };

  estimateGas: {
    accumulatedMessageFees(overrides?: CallOverrides): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    activeValidatorSetId(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFee(overrides?: CallOverrides): Promise<BigNumber>;

    endow(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceActiveValidatorSet(
      newValidators: PromiseOrValue<string>[],
      newValidatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceHistoricValidatorSet(
      _validators: PromiseOrValue<string>[],
      validatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxMessageLength(overrides?: CallOverrides): Promise<BigNumber>;

    maxRewardPayout(overrides?: CallOverrides): Promise<BigNumber>;

    messageFee(overrides?: CallOverrides): Promise<BigNumber>;

    onMessageReceived(
      source: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    palletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    proofTTL(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      appMessage: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessageFee(overrides?: CallOverrides): Promise<BigNumber>;

    sentEventId(overrides?: CallOverrides): Promise<BigNumber>;

    setActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeFee(
      _bridgeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxMessageLength(
      _maxMessageLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxRewardPayout(
      _maxRewardPayout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProofTTL(
      _proofTTL: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSendMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSentEventId(
      _newId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _thresholdPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholdPercent(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorSetDigests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifiedEventIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawMsgFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulatedMessageFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeValidatorSetId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endow(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceActiveValidatorSet(
      newValidators: PromiseOrValue<string>[],
      newValidatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceHistoricValidatorSet(
      _validators: PromiseOrValue<string>[],
      validatorSetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxMessageLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRewardPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onMessageReceived(
      source: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    palletAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proofTTL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      appMessage: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sentEventId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeFee(
      _bridgeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMessageLength(
      _maxMessageLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRewardPayout(
      _maxRewardPayout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProofTTL(
      _proofTTL: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSendMessageFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSentEventId(
      _newId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _thresholdPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thresholdPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorSetDigests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifiedEventIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMsgFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
