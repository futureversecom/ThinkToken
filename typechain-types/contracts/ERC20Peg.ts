/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ERC20PegInterface extends utils.Interface {
  functions: {
    "ETH_RESERVED_TOKEN_ADDRESS()": FunctionFragment;
    "adminEmergencyWithdraw(address,uint128,address)": FunctionFragment;
    "bridge()": FunctionFragment;
    "deposit(address,uint128,address)": FunctionFragment;
    "depositsActive()": FunctionFragment;
    "endow()": FunctionFragment;
    "onMessageReceived(address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "palletAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBridgeAddress(address)": FunctionFragment;
    "setDepositsActive(bool)": FunctionFragment;
    "setPalletAddress(address)": FunctionFragment;
    "setWithdrawalsActive(bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawalsActive()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ETH_RESERVED_TOKEN_ADDRESS"
      | "adminEmergencyWithdraw"
      | "bridge"
      | "deposit"
      | "depositsActive"
      | "endow"
      | "onMessageReceived"
      | "owner"
      | "palletAddress"
      | "renounceOwnership"
      | "setBridgeAddress"
      | "setDepositsActive"
      | "setPalletAddress"
      | "setWithdrawalsActive"
      | "supportsInterface"
      | "transferOwnership"
      | "withdrawalsActive"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ETH_RESERVED_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminEmergencyWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onMessageReceived",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "palletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositsActive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPalletAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalsActive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalsActive",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_RESERVED_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onMessageReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "palletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsActive",
    data: BytesLike
  ): Result;

  events: {
    "AdminWithdraw(address,address,uint128)": EventFragment;
    "BridgeAddressUpdated(address)": EventFragment;
    "Deposit(address,address,uint128,address)": EventFragment;
    "DepositActiveStatus(bool)": EventFragment;
    "Endowed(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PalletAddressUpdated(address)": EventFragment;
    "Withdraw(address,address,uint128)": EventFragment;
    "WithdrawalActiveStatus(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositActiveStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Endowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PalletAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalActiveStatus"): EventFragment;
}

export interface AdminWithdrawEventObject {
  _address: string;
  tokenAddress: string;
  amount: BigNumber;
}
export type AdminWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  AdminWithdrawEventObject
>;

export type AdminWithdrawEventFilter = TypedEventFilter<AdminWithdrawEvent>;

export interface BridgeAddressUpdatedEventObject {
  bridge: string;
}
export type BridgeAddressUpdatedEvent = TypedEvent<
  [string],
  BridgeAddressUpdatedEventObject
>;

export type BridgeAddressUpdatedEventFilter =
  TypedEventFilter<BridgeAddressUpdatedEvent>;

export interface DepositEventObject {
  _address: string;
  tokenAddress: string;
  amount: BigNumber;
  destination: string;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositActiveStatusEventObject {
  active: boolean;
}
export type DepositActiveStatusEvent = TypedEvent<
  [boolean],
  DepositActiveStatusEventObject
>;

export type DepositActiveStatusEventFilter =
  TypedEventFilter<DepositActiveStatusEvent>;

export interface EndowedEventObject {
  amount: BigNumber;
}
export type EndowedEvent = TypedEvent<[BigNumber], EndowedEventObject>;

export type EndowedEventFilter = TypedEventFilter<EndowedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PalletAddressUpdatedEventObject {
  palletAddress: string;
}
export type PalletAddressUpdatedEvent = TypedEvent<
  [string],
  PalletAddressUpdatedEventObject
>;

export type PalletAddressUpdatedEventFilter =
  TypedEventFilter<PalletAddressUpdatedEvent>;

export interface WithdrawEventObject {
  _address: string;
  tokenAddress: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawalActiveStatusEventObject {
  active: boolean;
}
export type WithdrawalActiveStatusEvent = TypedEvent<
  [boolean],
  WithdrawalActiveStatusEventObject
>;

export type WithdrawalActiveStatusEventFilter =
  TypedEventFilter<WithdrawalActiveStatusEvent>;

export interface ERC20Peg extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20PegInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_RESERVED_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    adminEmergencyWithdraw(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositsActive(overrides?: CallOverrides): Promise<[boolean]>;

    endow(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onMessageReceived(
      _source: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    palletAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawalsActive(overrides?: CallOverrides): Promise<[boolean]>;
  };

  ETH_RESERVED_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  adminEmergencyWithdraw(
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridge(overrides?: CallOverrides): Promise<string>;

  deposit(
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositsActive(overrides?: CallOverrides): Promise<boolean>;

  endow(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onMessageReceived(
    _source: PromiseOrValue<string>,
    _message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  palletAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeAddress(
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositsActive(
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPalletAddress(
    _palletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalsActive(
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawalsActive(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    ETH_RESERVED_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    adminEmergencyWithdraw(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridge(overrides?: CallOverrides): Promise<string>;

    deposit(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositsActive(overrides?: CallOverrides): Promise<boolean>;

    endow(overrides?: CallOverrides): Promise<void>;

    onMessageReceived(
      _source: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    palletAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalsActive(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AdminWithdraw(address,address,uint128)"(
      _address?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AdminWithdrawEventFilter;
    AdminWithdraw(
      _address?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AdminWithdrawEventFilter;

    "BridgeAddressUpdated(address)"(
      bridge?: PromiseOrValue<string> | null
    ): BridgeAddressUpdatedEventFilter;
    BridgeAddressUpdated(
      bridge?: PromiseOrValue<string> | null
    ): BridgeAddressUpdatedEventFilter;

    "Deposit(address,address,uint128,address)"(
      _address?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      destination?: null
    ): DepositEventFilter;
    Deposit(
      _address?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      destination?: null
    ): DepositEventFilter;

    "DepositActiveStatus(bool)"(
      active?: PromiseOrValue<boolean> | null
    ): DepositActiveStatusEventFilter;
    DepositActiveStatus(
      active?: PromiseOrValue<boolean> | null
    ): DepositActiveStatusEventFilter;

    "Endowed(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): EndowedEventFilter;
    Endowed(amount?: PromiseOrValue<BigNumberish> | null): EndowedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PalletAddressUpdated(address)"(
      palletAddress?: PromiseOrValue<string> | null
    ): PalletAddressUpdatedEventFilter;
    PalletAddressUpdated(
      palletAddress?: PromiseOrValue<string> | null
    ): PalletAddressUpdatedEventFilter;

    "Withdraw(address,address,uint128)"(
      _address?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
    Withdraw(
      _address?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;

    "WithdrawalActiveStatus(bool)"(
      active?: PromiseOrValue<boolean> | null
    ): WithdrawalActiveStatusEventFilter;
    WithdrawalActiveStatus(
      active?: PromiseOrValue<boolean> | null
    ): WithdrawalActiveStatusEventFilter;
  };

  estimateGas: {
    ETH_RESERVED_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    adminEmergencyWithdraw(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositsActive(overrides?: CallOverrides): Promise<BigNumber>;

    endow(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onMessageReceived(
      _source: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    palletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawalsActive(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_RESERVED_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminEmergencyWithdraw(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endow(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onMessageReceived(
      _source: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    palletAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeAddress(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPalletAddress(
      _palletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalsActive(
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
