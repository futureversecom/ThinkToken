/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type EventProofStruct = {
  eventId: PromiseOrValue<BigNumberish>;
  validatorSetId: PromiseOrValue<BigNumberish>;
  v: PromiseOrValue<BigNumberish>[];
  r: PromiseOrValue<BytesLike>[];
  s: PromiseOrValue<BytesLike>[];
  validators: PromiseOrValue<string>[];
};

export type EventProofStructOutput = [
  BigNumber,
  number,
  number[],
  string[],
  string[],
  string[]
] & {
  eventId: BigNumber;
  validatorSetId: number;
  v: number[];
  r: string[];
  s: string[];
  validators: string[];
};

export interface IBridgeInterface extends utils.Interface {
  functions: {
    "receiveMessage(address,address,bytes,(uint256,uint32,uint8[],bytes32[],bytes32[],address[]))": FunctionFragment;
    "sendMessage(address,bytes)": FunctionFragment;
    "sendMessageFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "receiveMessage" | "sendMessage" | "sendMessageFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      EventProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageFee",
    data: BytesLike
  ): Result;

  events: {
    "SendMessage(uint256,address,address,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SendMessage"): EventFragment;
}

export interface SendMessageEventObject {
  messageId: BigNumber;
  source: string;
  destination: string;
  message: string;
  fee: BigNumber;
}
export type SendMessageEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  SendMessageEventObject
>;

export type SendMessageEventFilter = TypedEventFilter<SendMessageEvent>;

export interface IBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessageFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  receiveMessage(
    source: PromiseOrValue<string>,
    destination: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    proof: EventProofStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    destination: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessageFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "SendMessage(uint256,address,address,bytes,uint256)"(
      messageId?: null,
      source?: null,
      destination?: null,
      message?: null,
      fee?: null
    ): SendMessageEventFilter;
    SendMessage(
      messageId?: null,
      source?: null,
      destination?: null,
      message?: null,
      fee?: null
    ): SendMessageEventFilter;
  };

  estimateGas: {
    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessageFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    receiveMessage(
      source: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      proof: EventProofStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
